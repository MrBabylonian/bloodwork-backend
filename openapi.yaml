{"openapi":"3.1.0","info":{"title":"Veterinary Bloodwork Analysis API","description":"API for veterinary bloodwork analysis with AI-powered diagnostics","version":"1.0.0"},"paths":{"/api/v1/auth/register":{"post":{"tags":["Authentication","Authentication"],"summary":"Register","description":"Register a new user account.\n\nCreates a new user account with 'pending' approval status.\nAdmin approval is required before the user can log in.\n\nArgs:\n    user_data (UserRegistration): User registration details\n    auth_service (AuthService): Authentication service instance\n\nReturns:\n    dict: Registration result with user ID and approval status\n\nRaises:\n    HTTPException: 400 if username or email already exists\n\nExample:\n    POST /api/v1/auth/register\n    {\n        \"username\": \"john_doe\",\n        \"email\": \"john@example.com\",\n        \"password\": \"secure_password\",\n        \"role\": \"veterinarian\"\n    }","operationId":"register_api_v1_auth_register_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRegistration"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/login":{"post":{"tags":["Authentication","Authentication"],"summary":"Login","description":"Authenticate user and return JWT tokens.\n\nValidates user credentials and returns access and refresh tokens\nfor approved users only. Tracks device and IP information for security.\n\nArgs:\n    user_data (UserLogin): Username and password\n    request (Request): HTTP request for client info extraction\n    auth_service (AuthService): Authentication service instance\n\nReturns:\n    TokenResponse: Access and refresh tokens with metadata\n\nRaises:\n    HTTPException: 401 if credentials invalid or user not approved\n\nExample:\n    POST /api/v1/auth/login\n    {\n        \"username\": \"john_doe\",\n        \"password\": \"secure_password\"\n    }","operationId":"login_api_v1_auth_login_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLogin"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TokenResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/refresh":{"post":{"tags":["Authentication","Authentication"],"summary":"Refresh Token","description":"Refresh access token using valid refresh token.\n\nProvides seamless token renewal for continuous user sessions\nwithout requiring re-authentication.\n\nArgs:\n    token_data (TokenRefresh): Refresh token data  \n    auth_service (AuthService): Authentication service instance\n\nReturns:\n    AccessTokenResponse: New access token with metadata\n\nRaises:\n    HTTPException: 401 if refresh token invalid or expired\n\nExample:\n    POST /api/v1/auth/refresh\n    {\n        \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\"\n    }","operationId":"refresh_token_api_v1_auth_refresh_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TokenRefresh"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccessTokenResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/logout":{"post":{"tags":["Authentication","Authentication"],"summary":"Logout","description":"Logout user by invalidating their refresh token.\n\nEnsures security by invalidating refresh token, requiring \nre-authentication for future access.\n\nArgs:\n    token_data (TokenRefresh): Refresh token to invalidate\n    auth_service (AuthService): Authentication service instance\n\nReturns:\n    dict: Logout success message\n\nRaises:\n    HTTPException: 401 if token invalid or already invalidated\n\nExample:\n    POST /api/v1/auth/logout\n    {\n        \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\"\n    }","operationId":"logout_api_v1_auth_logout_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TokenRefresh"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/profile":{"get":{"tags":["Authentication","Authentication"],"summary":"Get Profile","description":"Get authenticated user's profile information.\n\nReturns the current user's profile information including role,\napproval status, and custom profile fields.\n\nArgs:\n    current_user (User): Current authenticated user\n\nReturns:\n    UserProfile: User profile information\n\nExample:\n    GET /api/v1/auth/profile\n    Response: {\n        \"id\": \"VET-001\",\n        \"username\": \"john_doe\",\n        \"email\": \"john@example.com\",\n        \"role\": \"veterinarian\",\n        ...\n    }","operationId":"get_profile_api_v1_auth_profile_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserProfile"}}}}},"security":[{"HTTPBearer":[]}]},"put":{"tags":["Authentication","Authentication"],"summary":"Update Profile","description":"Update user profile information.\n\nUpdates the authenticated user's profile with the provided data.\nOnly the fields provided in the request will be updated.\n\nArgs:\n    profile_data (UserProfileUpdate): Profile fields to update\n    current_user (Union[Admin, User]): Authenticated user\n    auth_service (AuthService): Authentication service instance\n\nReturns:\n    dict: Success message\n\nRaises:\n    HTTPException: 400 if update fails\n\nExample:\n    PUT /api/v1/auth/profile\n    {\n        \"email\": \"new@example.com\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\"\n    }","operationId":"update_profile_api_v1_auth_profile_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserProfileUpdate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/auth/password":{"put":{"tags":["Authentication","Authentication"],"summary":"Change Password","description":"Change user password.\n\nUpdates the authenticated user's password after validating the current password.\nRequires current password for security verification.\n\nArgs:\n    password_data (PasswordChangeRequest): Password change request data\n    current_user (Union[Admin, User]): Authenticated user\n    auth_service (AuthService): Authentication service instance\n\nReturns:\n    dict: Success message\n\nRaises:\n    HTTPException: \n        - 400 if passwords don't match or validation fails\n        - 401 if current password is incorrect\n\nExample:\n    PUT /api/v1/auth/password\n    {\n        \"current_password\": \"old_password\",\n        \"new_password\": \"new_secure_password\",\n        \"confirm_password\": \"new_secure_password\"\n    }","operationId":"change_password_api_v1_auth_password_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PasswordChangeRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/auth/health":{"get":{"tags":["Authentication","Authentication"],"summary":"Health Check","description":"Health check endpoint for authentication router.\n\nReturns a simple status message to verify that the auth router is operational.\nUseful for monitoring and automated health checks.\n\nReturns:\n    dict: Service status message","operationId":"health_check_api_v1_auth_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/v1/patients/":{"post":{"tags":["Patient Management","Patient Management"],"summary":"Create Patient","description":"Create a new patient record in the system.\n\nThis endpoint allows veterinarians and administrators to create new\npatient records. The patient_id will be auto-generated using the sequence counter.\n\nArgs:\n    patient_data (PatientCreate): Patient information\n    current_user (Union[Admin, User]): Authenticated user (must be veterinarian or admin)\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    PatientResponse: Created patient details\n\nRaises:\n    HTTPException: If user is not authenticated or patient creation fails\n\nExample:\n    POST /api/v1/patients/\n    Request body: {\n        \"name\": \"Max\",\n        \"species\": \"Dog\",\n        \"breed\": \"Golden Retriever\",\n        ...\n    }\n    Response: {\n        \"patient_id\": \"PAT-001\",\n        \"name\": \"Max\",\n        \"species\": \"Dog\",\n        ...\n    }","operationId":"create_patient_api_v1_patients__post","security":[{"HTTPBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"get":{"tags":["Patient Management","Patient Management"],"summary":"Get All Patients","description":"Retrieve all patients from the system with pagination.\n\nThis endpoint returns a paginated list of patients in the database,\naccessible to all authenticated users.\n\nArgs:\n    page (int): Page number (1-indexed)\n    limit (int): Number of items per page\n    current_user (Union[Admin, User]): Authenticated user\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    PatientListResponse: List of patients with pagination metadata\n\nExample:\n    GET /api/v1/patients/?page=1&limit=10\n    Response: {\n        \"patients\": [\n            {\n                \"patient_id\": \"PAT-001\",\n                \"name\": \"Max\",\n                \"species\": \"Dog\",\n                ...\n            }\n        ],\n        \"total\": 45,\n        \"page\": 1,\n        \"limit\": 10\n    }","operationId":"get_all_patients_api_v1_patients__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"page","in":"query","required":false,"schema":{"type":"integer","default":1,"title":"Page"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientListResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/patients/{patient_id}":{"get":{"tags":["Patient Management","Patient Management"],"summary":"Get Patient","description":"Retrieve a specific patient by ID.\n\nThis endpoint returns detailed information for a specific patient,\naccessible to all authenticated users.\n\nArgs:\n    patient_id (str): Patient ID to retrieve\n    current_user (Union[Admin, User]): Authenticated user\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    PatientResponse: Patient details\n\nRaises:\n    HTTPException: 404 if patient not found\n\nExample:\n    GET /api/v1/patients/PAT-001\n    Response: {\n        \"patient_id\": \"PAT-001\",\n        \"name\": \"Max\",\n        ...\n    }","operationId":"get_patient_api_v1_patients__patient_id__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","title":"Patient Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["Patient Management","Patient Management"],"summary":"Update Patient","description":"Update a patient's information.\n\nThis endpoint updates a patient's information with the provided data.\nOnly fields included in the request are updated.\n\nArgs:\n    patient_id (str): Patient ID to update\n    patient_data (PatientUpdate): Patient fields to update\n    current_user (Union[Admin, User]): Authenticated user\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    PatientResponse: Updated patient details\n\nRaises:\n    HTTPException:\n        - 404: If patient not found\n        - 400: If update fails\n\nExample:\n    PUT /api/v1/patients/PAT-001\n    {\n        \"weight\": 32.5,\n        \"medical_history\": {\n            \"vaccinations\": [\"Rabies\", \"Distemper\"]\n        }\n    }","operationId":"update_patient_api_v1_patients__patient_id__put","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","title":"Patient Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["Patient Management","Patient Management"],"summary":"Delete Patient","description":"Delete (soft-delete) a patient.\n\nThis endpoint marks a patient as inactive (soft-delete)\nrather than permanently deleting the record.\n\nArgs:\n    patient_id (str): Patient ID to delete\n    current_user (Union[Admin, User]): Authenticated user (vet or admin only)\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    dict: Deletion success message\n\nRaises:\n    HTTPException:\n        - 404: If patient not found\n        - 400: If deletion fails\n\nExample:\n    DELETE /api/v1/patients/PAT-001\n    Response: {\"message\": \"Patient deleted successfully\"}","operationId":"delete_patient_api_v1_patients__patient_id__delete","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","title":"Patient Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/patients/search/{name}":{"get":{"tags":["Patient Management","Patient Management"],"summary":"Search Patients","description":"Search patients by name with pagination.\n\nThis endpoint performs a text search on patient names and returns\nmatching patients with pagination, accessible to all authenticated users.\n\nArgs:\n    name (str): Name to search for\n    page (int): Page number (1-indexed)\n    limit (int): Number of items per page\n    current_user (Union[Admin, User]): Authenticated user\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    PatientListResponse: List of matching patients with pagination metadata\n\nExample:\n    GET /api/v1/patients/search/Max?page=1&limit=10\n    Response: {\n        \"patients\": [\n            {\n                \"patient_id\": \"PAT-001\",\n                \"name\": \"Max\",\n                ...\n            }\n        ],\n        \"total\": 3,\n        \"page\": 1,\n        \"limit\": 10\n    }","operationId":"search_patients_api_v1_patients_search__name__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"name","in":"path","required":true,"schema":{"type":"string","title":"Name"}},{"name":"page","in":"query","required":false,"schema":{"type":"integer","default":1,"title":"Page"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatientListResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/patients/health":{"get":{"tags":["Patient Management","Patient Management"],"summary":"Health Check","description":"Health check endpoint for patient router.\n\nReturns a simple status message to verify that the patient router is operational.\nUseful for monitoring and automated health checks.\n\nReturns:\n    dict: Service status message","operationId":"health_check_api_v1_patients_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/v1/analysis/upload":{"post":{"tags":["Bloodwork Analysis","Analysis"],"summary":"Upload PDF for analysis","description":"Upload a PDF bloodwork report for AI-powered analysis","operationId":"upload_pdf_for_analysis_api_v1_analysis_upload_post","requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_upload_pdf_for_analysis_api_v1_analysis_upload_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/diagnostics/patient/{patient_id}/pending":{"get":{"tags":["Diagnostics","Diagnostics"],"summary":"Check Pending Analysis","description":"Check if a patient has a pending analysis request.\n\nThis endpoint returns whether there's a pending analysis request for the specified patient.\n\nArgs:\n    patient_id (str): Patient ID to check\n    current_user (Union[Admin, User]): Authenticated user\n\nReturns:\n    dict: Dictionary with has_pending_analysis boolean\n\nExample:\n    GET /api/v1/diagnostics/patient/PAT-001/pending\n    Response: {\"has_pending_analysis\": true}","operationId":"check_pending_analysis_api_v1_diagnostics_patient__patient_id__pending_get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","description":"Patient ID to check for pending analysis","title":"Patient Id"},"description":"Patient ID to check for pending analysis"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"object","additionalProperties":true,"title":"Response Check Pending Analysis Api V1 Diagnostics Patient  Patient Id  Pending Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/diagnostics/patient/{patient_id}/latest":{"get":{"tags":["Diagnostics","Diagnostics"],"summary":"Get Latest Patient Diagnostic","description":"Retrieve the latest diagnostic for a specific patient.\n\nThis endpoint returns the most recent diagnostic result for the specified patient,\nsorted by test date in descending order.\n\nArgs:\n    patient_id (str): Patient ID to retrieve latest diagnostic for\n    current_user (Union[Admin, User]): Authenticated user\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    DiagnosticResponse: Latest diagnostic result for the patient\n\nRaises:\n    HTTPException: \n        - 404: If no diagnostics found for the patient\n        - 500: If an error occurs during retrieval\n\nExample:\n    GET /api/v1/diagnostics/patient/PAT-001/latest","operationId":"get_latest_patient_diagnostic_api_v1_diagnostics_patient__patient_id__latest_get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","description":"Patient ID to retrieve latest diagnostic for","title":"Patient Id"},"description":"Patient ID to retrieve latest diagnostic for"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DiagnosticResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/diagnostics/patient/{patient_id}":{"get":{"tags":["Diagnostics","Diagnostics"],"summary":"Get Patient Diagnostics","description":"Retrieve all diagnostics for a specific patient with pagination.\n\nThis endpoint returns all diagnostic results for the specified patient,\nsorted by test date in descending order (newest to oldest).\n\nArgs:\n    patient_id (str): Patient ID to retrieve diagnostics for\n    page (int): Page number (1-indexed)\n    limit (int): Number of items per page\n    current_user (Union[Admin, User]): Authenticated user\n    repo_factory (RepositoryFactory): Database repository factory\n\nReturns:\n    DiagnosticListResponse: List of diagnostic results with pagination metadata\n\nRaises:\n    HTTPException: \n        - 404: If patient not found\n        - 500: If an error occurs during retrieval\n\nExample:\n    GET /api/v1/diagnostics/patient/PAT-001?page=1&limit=10","operationId":"get_patient_diagnostics_api_v1_diagnostics_patient__patient_id__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","description":"Patient ID to retrieve diagnostics for","title":"Patient Id"},"description":"Patient ID to retrieve diagnostics for"},{"name":"page","in":"query","required":false,"schema":{"type":"integer","minimum":1,"description":"Page number","default":1,"title":"Page"},"description":"Page number"},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","maximum":100,"minimum":1,"description":"Items per page","default":10,"title":"Limit"},"description":"Items per page"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DiagnosticListResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/diagnostics/patient/{patient_id}/tests-count":{"get":{"tags":["Diagnostics","Diagnostics"],"summary":"Get total tests performed for a patient","description":"Return the total number of diagnostics linked to a patient.","operationId":"get_tests_count_per_patient_api_v1_diagnostics_patient__patient_id__tests_count_get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"patient_id","in":"path","required":true,"schema":{"type":"string","description":"Patient ID to count diagnostics for","title":"Patient Id"},"description":"Patient ID to count diagnostics for"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"integer","title":"Response Get Tests Count Per Patient Api V1 Diagnostics Patient  Patient Id  Tests Count Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/health":{"get":{"summary":"Health Check","description":"Health check endpoint","operationId":"health_check_api_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/protected":{"get":{"summary":"Protected Route","description":"Test protected route","operationId":"protected_route_api_protected_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}},"security":[{"HTTPBearer":[]}]}}},"components":{"schemas":{"AccessTokenResponse":{"properties":{"access_token":{"type":"string","title":"Access Token"},"token_type":{"type":"string","title":"Token Type","default":"bearer"},"expires_in":{"type":"integer","title":"Expires In"}},"type":"object","required":["access_token","expires_in"],"title":"AccessTokenResponse","description":"Access token response"},"ApprovalStatus":{"type":"string","enum":["pending","approved","rejected"],"title":"ApprovalStatus","description":"User approval status enumeration."},"Body_upload_pdf_for_analysis_api_v1_analysis_upload_post":{"properties":{"file":{"type":"string","format":"binary","title":"File"},"patient_id":{"type":"string","title":"Patient Id"}},"type":"object","required":["file","patient_id"],"title":"Body_upload_pdf_for_analysis_api_v1_analysis_upload_post"},"DiagnosticListResponse":{"properties":{"diagnostics":{"items":{"$ref":"#/components/schemas/DiagnosticResponse"},"type":"array","title":"Diagnostics"},"total":{"type":"integer","title":"Total"},"limit":{"type":"integer","title":"Limit"},"skip":{"type":"integer","title":"Skip"},"has_more":{"type":"boolean","title":"Has More"}},"type":"object","required":["diagnostics","total","limit","skip","has_more"],"title":"DiagnosticListResponse","description":"Response schema for diagnostic list."},"DiagnosticResponse":{"properties":{"diagnostic_id":{"type":"string","title":"Diagnostic Id"},"patient_id":{"type":"string","title":"Patient Id"},"sequence_number":{"type":"integer","title":"Sequence Number"},"test_date":{"type":"string","format":"date-time","title":"Test Date"},"diagnostic_summary":{"additionalProperties":true,"type":"object","title":"Diagnostic Summary"},"ai_diagnostic":{"additionalProperties":true,"type":"object","title":"Ai Diagnostic"},"pdf_metadata":{"additionalProperties":true,"type":"object","title":"Pdf Metadata"},"processing_info":{"additionalProperties":true,"type":"object","title":"Processing Info"},"veterinarian_review":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Veterinarian Review"},"created_by":{"type":"string","title":"Created By"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["diagnostic_id","patient_id","sequence_number","test_date","diagnostic_summary","ai_diagnostic","pdf_metadata","processing_info","created_by","created_at"],"title":"DiagnosticResponse","description":"Complete diagnostic response schema."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"PasswordChangeRequest":{"properties":{"current_password":{"type":"string","title":"Current Password"},"new_password":{"type":"string","title":"New Password"},"confirm_password":{"type":"string","title":"Confirm Password"}},"type":"object","required":["current_password","new_password","confirm_password"],"title":"PasswordChangeRequest","description":"Schema for password change requests.\n\nUsed when users want to change their password. Requires current password\nfor security verification and new password with confirmation."},"PatientCreate":{"properties":{"name":{"type":"string","title":"Name"},"species":{"type":"string","title":"Species"},"breed":{"type":"string","title":"Breed"},"birthdate":{"type":"string","format":"date-time","title":"Birthdate"},"sex":{"type":"string","title":"Sex"},"weight":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Weight"},"owner_info":{"additionalProperties":{"type":"string"},"type":"object","title":"Owner Info"},"medical_history":{"additionalProperties":true,"type":"object","title":"Medical History","default":{}}},"type":"object","required":["name","species","breed","birthdate","sex","owner_info"],"title":"PatientCreate","description":"Patient creation request"},"PatientListResponse":{"properties":{"patients":{"items":{"$ref":"#/components/schemas/PatientResponse"},"type":"array","title":"Patients"},"total":{"type":"integer","title":"Total"},"page":{"type":"integer","title":"Page"},"limit":{"type":"integer","title":"Limit"}},"type":"object","required":["patients","total","page","limit"],"title":"PatientListResponse","description":"Patient list response"},"PatientResponse":{"properties":{"patient_id":{"type":"string","title":"Patient Id"},"name":{"type":"string","title":"Name"},"species":{"type":"string","title":"Species"},"breed":{"type":"string","title":"Breed"},"birthdate":{"type":"string","format":"date-time","title":"Birthdate"},"sex":{"type":"string","title":"Sex"},"weight":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Weight"},"owner_info":{"additionalProperties":{"type":"string"},"type":"object","title":"Owner Info"},"medical_history":{"additionalProperties":true,"type":"object","title":"Medical History"},"created_by":{"type":"string","title":"Created By"},"assigned_to":{"type":"string","title":"Assigned To"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"updated_at":{"type":"string","format":"date-time","title":"Updated At"},"is_active":{"type":"boolean","title":"Is Active"}},"type":"object","required":["patient_id","name","species","breed","birthdate","sex","weight","owner_info","medical_history","created_by","assigned_to","created_at","updated_at","is_active"],"title":"PatientResponse","description":"Patient response"},"PatientUpdate":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"species":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Species"},"breed":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Breed"},"birthdate":{"anyOf":[{"type":"string","format":"date-time"},{"type":"null"}],"title":"Birthdate"},"sex":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Sex"},"weight":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Weight"},"owner_info":{"anyOf":[{"additionalProperties":{"type":"string"},"type":"object"},{"type":"null"}],"title":"Owner Info"},"medical_history":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Medical History"}},"type":"object","title":"PatientUpdate","description":"Patient update request"},"TokenRefresh":{"properties":{"refresh_token":{"type":"string","title":"Refresh Token"}},"type":"object","required":["refresh_token"],"title":"TokenRefresh","description":"Token refresh request"},"TokenResponse":{"properties":{"access_token":{"type":"string","title":"Access Token"},"refresh_token":{"type":"string","title":"Refresh Token"},"token_type":{"type":"string","title":"Token Type","default":"bearer"},"expires_in":{"type":"integer","title":"Expires In"},"user":{"additionalProperties":true,"type":"object","title":"User"}},"type":"object","required":["access_token","refresh_token","expires_in","user"],"title":"TokenResponse","description":"Schema for JWT token responses.\n\nReturned after successful login containing both access and refresh tokens."},"UserLogin":{"properties":{"username":{"type":"string","title":"Username"},"password":{"type":"string","title":"Password"}},"type":"object","required":["username","password"],"title":"UserLogin","description":"Schema for user login requests.\n\nAccepts username and password for authentication."},"UserProfile":{"properties":{"user_id":{"type":"string","title":"User Id"},"username":{"type":"string","title":"Username"},"email":{"type":"string","title":"Email"},"role":{"$ref":"#/components/schemas/UserRole"},"approval_status":{"$ref":"#/components/schemas/ApprovalStatus"},"profile":{"additionalProperties":true,"type":"object","title":"Profile"},"is_active":{"type":"boolean","title":"Is Active"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"last_login":{"anyOf":[{"type":"string","format":"date-time"},{"type":"null"}],"title":"Last Login"}},"type":"object","required":["user_id","username","email","role","approval_status","profile","is_active","created_at"],"title":"UserProfile","description":"User profile response"},"UserProfileUpdate":{"properties":{"email":{"anyOf":[{"type":"string","format":"email"},{"type":"null"}],"title":"Email"},"first_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"First Name"},"last_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Last Name"},"license_number":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"License Number"},"clinic_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Clinic Name"},"phone":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Phone"}},"type":"object","title":"UserProfileUpdate","description":"User profile update request"},"UserRegistration":{"properties":{"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"password":{"type":"string","title":"Password"},"role":{"$ref":"#/components/schemas/UserRole"},"profile":{"additionalProperties":true,"type":"object","title":"Profile","default":{}}},"type":"object","required":["username","email","password","role"],"title":"UserRegistration","description":"Schema for user registration requests.\n\nUsed when new users sign up for the system. All users start with\n'pending' approval status requiring admin approval."},"UserRole":{"type":"string","enum":["veterinarian","veterinary_technician"],"title":"UserRole","description":"User role enumeration for role-based access control."},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}},"securitySchemes":{"HTTPBearer":{"type":"http","scheme":"bearer"}}}}